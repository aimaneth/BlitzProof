'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from './button'
import { Card, CardContent, CardHeader, CardTitle } from './card'
import { Badge } from './badge'
import { 
  Shield, 
  Code, 
  Clock, 
  AlertTriangle,
  CheckCircle,
  XCircle,
  ChevronDown,
  ChevronUp,
  Copy,
  Download,
  BookOpen,
  Zap,
  Brain,
  Settings,
  Eye,
  FileText,
  ExternalLink
} from 'lucide-react'
import { toast } from 'sonner'
import { apiService } from '@/lib/api'

interface RemediationStep {
  id: string
  title: string
  description: string
  code: string
  explanation: string
  difficulty: 'easy' | 'medium' | 'hard'
  estimatedTime: string
  riskLevel: 'low' | 'medium' | 'high'
  references: string[]
}

interface RemediationPlan {
  vulnerabilityId: string
  vulnerabilityTitle: string
  severity: string
  currentCode: string
  steps: RemediationStep[]
  totalEstimatedTime: string
  priority: 'critical' | 'high' | 'medium' | 'low'
  automated: boolean
  aiGenerated: boolean
  confidence: number
}

interface RemediationCardProps {
  vulnerability: any
  className?: string
}

export function RemediationCard({ vulnerability, className = '' }: RemediationCardProps) {
  const [remediationPlan, setRemediationPlan] = useState<RemediationPlan | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [showDetails, setShowDetails] = useState(false)
  const [expandedSteps, setExpandedSteps] = useState<Set<string>>(new Set())

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-500 bg-red-500/10 border-red-500/20'
      case 'high': return 'text-orange-500 bg-orange-500/10 border-orange-500/20'
      case 'medium': return 'text-yellow-500 bg-yellow-500/10 border-yellow-500/20'
      case 'low': return 'text-green-500 bg-green-500/10 border-green-500/20'
      default: return 'text-blue-500 bg-blue-500/10 border-blue-500/20'
    }
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'text-green-500'
      case 'medium': return 'text-yellow-500'
      case 'hard': return 'text-red-500'
      default: return 'text-gray-500'
    }
  }

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'low': return 'text-green-500'
      case 'medium': return 'text-yellow-500'
      case 'high': return 'text-red-500'
      default: return 'text-gray-500'
    }
  }

  const generateRemediation = async () => {
    try {
      setIsLoading(true)
      const response = await apiService.generateRemediationPlan(vulnerability)
      setRemediationPlan(response.data)
      toast.success('Remediation plan generated successfully')
    } catch (error) {
      console.error('Failed to generate remediation:', error)
      toast.error('Failed to generate remediation plan')
    } finally {
      setIsLoading(false)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    toast.success('Code copied to clipboard')
  }

  const toggleStepExpansion = (stepId: string) => {
    const newExpanded = new Set(expandedSteps)
    if (newExpanded.has(stepId)) {
      newExpanded.delete(stepId)
    } else {
      newExpanded.add(stepId)
    }
    setExpandedSteps(newExpanded)
  }

  const downloadRemediation = () => {
    if (!remediationPlan) return

    const content = `# Remediation Plan for ${remediationPlan.vulnerabilityTitle}

## Vulnerability Details
- **Title**: ${remediationPlan.vulnerabilityTitle}
- **Severity**: ${remediationPlan.severity}
- **Priority**: ${remediationPlan.priority}
- **Estimated Time**: ${remediationPlan.totalEstimatedTime}
- **Confidence**: ${(remediationPlan.confidence * 100).toFixed(1)}%

## Remediation Steps

${remediationPlan.steps.map((step, index) => `
### Step ${index + 1}: ${step.title}

**Description**: ${step.description}

**Difficulty**: ${step.difficulty}
**Estimated Time**: ${step.estimatedTime}
**Risk Level**: ${step.riskLevel}

**Code Fix**:
\`\`\`solidity
${step.code}
\`\`\`

**Explanation**: ${step.explanation}

**References**:
${step.references.map(ref => `- ${ref}`).join('\n')}
`).join('\n')}

Generated by BlitzProof Security Platform
Date: ${new Date().toLocaleDateString()}
`

    const blob = new Blob([content], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `remediation-${remediationPlan.vulnerabilityId}.md`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)

    toast.success('Remediation plan downloaded')
  }

  return (
    <Card className={`bg-card/30 border border-white/10 shadow-lg ${className}`}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-sm sm:text-base">
            <Shield className="h-4 w-4 sm:h-5 sm:w-5 text-primary" />
            AI-Powered Remediation
          </CardTitle>
          <Badge 
            variant="outline" 
            className={`text-xs ${getSeverityColor(vulnerability.severity)}`}
          >
            {vulnerability.severity.toUpperCase()}
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {/* Vulnerability Summary */}
        <div className="p-3 bg-card/50 rounded-lg border border-white/10">
          <h4 className="font-medium text-white mb-2">{vulnerability.title}</h4>
          <p className="text-sm text-gray-400 mb-3">{vulnerability.description}</p>
          <div className="flex items-center gap-4 text-xs text-gray-500">
            <span>Line {vulnerability.line}</span>
            <span>File: {vulnerability.file}</span>
          </div>
        </div>

        {/* Generate Remediation Button */}
        {!remediationPlan && (
          <Button
            onClick={generateRemediation}
            disabled={isLoading}
            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
          >
            {isLoading ? (
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                Generating...
              </div>
            ) : (
              <div className="flex items-center gap-2">
                <Brain className="w-4 h-4" />
                Generate AI Remediation
              </div>
            )}
          </Button>
        )}

        {/* Remediation Plan */}
        {remediationPlan && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-4"
          >
            {/* Plan Summary */}
            <div className="p-4 bg-gradient-to-r from-green-500/10 to-blue-500/10 rounded-lg border border-green-500/20">
              <div className="flex items-center justify-between mb-3">
                <h4 className="font-semibold text-white">Remediation Plan</h4>
                <div className="flex items-center gap-2">
                  <Badge variant="outline" className="text-green-500 border-green-500/30">
                    {remediationPlan.priority.toUpperCase()}
                  </Badge>
                  <Badge variant="outline" className="text-blue-500 border-blue-500/30">
                    {(remediationPlan.confidence * 100).toFixed(0)}% Confidence
                  </Badge>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div className="flex items-center gap-2">
                  <Clock className="w-4 h-4 text-blue-400" />
                  <span className="text-gray-300">Time: {remediationPlan.totalEstimatedTime}</span>
                </div>
                <div className="flex items-center gap-2">
                  <Code className="w-4 h-4 text-green-400" />
                  <span className="text-gray-300">Steps: {remediationPlan.steps.length}</span>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowDetails(!showDetails)}
                className="flex-1"
              >
                {showDetails ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
                {showDetails ? 'Hide Details' : 'Show Details'}
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={downloadRemediation}
                className="flex items-center gap-2"
              >
                <Download className="w-4 h-4" />
                Export
              </Button>
            </div>

            {/* Detailed Steps */}
            <AnimatePresence>
              {showDetails && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="space-y-3"
                >
                  {remediationPlan.steps.map((step, index) => (
                    <div
                      key={step.id}
                      className="p-4 bg-card/50 rounded-lg border border-white/10"
                    >
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="font-medium text-white">
                          Step {index + 1}: {step.title}
                        </h5>
                        <div className="flex items-center gap-2">
                          <Badge 
                            variant="outline" 
                            className={`text-xs ${getDifficultyColor(step.difficulty)}`}
                          >
                            {step.difficulty}
                          </Badge>
                          <Badge 
                            variant="outline" 
                            className={`text-xs ${getRiskColor(step.riskLevel)}`}
                          >
                            {step.riskLevel} risk
                          </Badge>
                        </div>
                      </div>

                      <p className="text-sm text-gray-400 mb-3">{step.description}</p>

                      <div className="flex items-center gap-2 mb-3 text-xs text-gray-500">
                        <Clock className="w-3 h-3" />
                        <span>{step.estimatedTime}</span>
                      </div>

                      {/* Code Block */}
                      <div className="relative">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-xs text-gray-400">Code Fix</span>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => copyToClipboard(step.code)}
                            className="h-6 px-2 text-xs"
                          >
                            <Copy className="w-3 h-3" />
                          </Button>
                        </div>
                        <pre className="bg-black/50 p-3 rounded text-xs overflow-x-auto">
                          <code className="text-green-400">{step.code}</code>
                        </pre>
                      </div>

                      {/* Explanation */}
                      <div className="mt-3 p-3 bg-blue-500/10 rounded border border-blue-500/20">
                        <h6 className="text-xs font-medium text-blue-400 mb-1">Explanation</h6>
                        <p className="text-xs text-gray-300">{step.explanation}</p>
                      </div>

                      {/* References */}
                      {step.references.length > 0 && (
                        <div className="mt-3">
                          <h6 className="text-xs font-medium text-gray-400 mb-2">References</h6>
                          <div className="space-y-1">
                            {step.references.map((ref, refIndex) => (
                              <a
                                key={refIndex}
                                href={ref}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="flex items-center gap-1 text-xs text-blue-400 hover:text-blue-300 transition-colors"
                              >
                                <ExternalLink className="w-3 h-3" />
                                {ref}
                              </a>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        )}
      </CardContent>
    </Card>
  )
} 