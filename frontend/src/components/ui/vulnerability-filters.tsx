'use client'

import { useState, useMemo, useEffect } from 'react'
import { Search, Filter, X, AlertTriangle, Shield, Zap, Target } from 'lucide-react'
import { Button } from './button'
import { getSeverityColor, getSeverityBgColor, sortVulnerabilitiesBySeverity } from '@/lib/utils'

interface Vulnerability {
  id: number
  title: string
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info'
  description: string
  line?: number
  category?: string
}

interface VulnerabilityFiltersProps {
  vulnerabilities: Vulnerability[]
  onFilteredVulnerabilities: (filtered: Vulnerability[]) => void
  className?: string
}

export function VulnerabilityFilters({ 
  vulnerabilities, 
  onFilteredVulnerabilities, 
  className = '' 
}: VulnerabilityFiltersProps) {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedSeverities, setSelectedSeverities] = useState<string[]>([])
  const [selectedCategories, setSelectedCategories] = useState<string[]>([])

  // Get unique categories from vulnerabilities
  const categories = useMemo(() => {
    const cats = vulnerabilities
      .map(v => v.category)
      .filter(Boolean) as string[]
    return [...new Set(cats)]
  }, [vulnerabilities])

  // Severity options with icons and colors
  const severityOptions = [
    { value: 'critical', label: 'Critical', icon: AlertTriangle, color: getSeverityColor('critical'), bgColor: getSeverityBgColor('critical') },
    { value: 'high', label: 'High', icon: AlertTriangle, color: getSeverityColor('high'), bgColor: getSeverityBgColor('high') },
    { value: 'medium', label: 'Medium', icon: Shield, color: getSeverityColor('medium'), bgColor: getSeverityBgColor('medium') },
    { value: 'low', label: 'Low', icon: Zap, color: getSeverityColor('low'), bgColor: getSeverityBgColor('low') },
    { value: 'info', label: 'Info', icon: Target, color: getSeverityColor('info'), bgColor: getSeverityBgColor('info') },
  ]

  // Filter vulnerabilities based on current filters
  const filteredVulnerabilities = useMemo(() => {
    return vulnerabilities.filter(vuln => {
      // Search filter
      const matchesSearch = !searchTerm || 
        vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.description.toLowerCase().includes(searchTerm.toLowerCase())

      // Severity filter
      const matchesSeverity = selectedSeverities.length === 0 || 
        selectedSeverities.includes(vuln.severity)

      // Category filter
      const matchesCategory = selectedCategories.length === 0 || 
        (vuln.category && selectedCategories.includes(vuln.category))

      return matchesSearch && matchesSeverity && matchesCategory
    })
  }, [vulnerabilities, searchTerm, selectedSeverities, selectedCategories])

  // Update parent component when filters change
  useEffect(() => {
    onFilteredVulnerabilities(sortVulnerabilitiesBySeverity(filteredVulnerabilities))
  }, [filteredVulnerabilities, onFilteredVulnerabilities])

  const toggleSeverity = (severity: string) => {
    setSelectedSeverities(prev => 
      prev.includes(severity) 
        ? prev.filter(s => s !== severity)
        : [...prev, severity]
    )
  }

  const toggleCategory = (category: string) => {
    setSelectedCategories(prev => 
      prev.includes(category) 
        ? prev.filter(c => c !== category)
        : [...prev, category]
    )
  }

  const clearAllFilters = () => {
    setSearchTerm('')
    setSelectedSeverities([])
    setSelectedCategories([])
  }

  const hasActiveFilters = searchTerm || selectedSeverities.length > 0 || selectedCategories.length > 0

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Search Bar */}
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
        <input
          type="text"
          placeholder="Search vulnerabilities..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full pl-10 pr-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
        {searchTerm && (
          <button
            onClick={() => setSearchTerm('')}
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
          >
            <X className="w-4 h-4" />
          </button>
        )}
      </div>

      {/* Filter Summary */}
      {hasActiveFilters && (
        <div className="flex items-center justify-between p-3 bg-gray-800/50 rounded-lg border border-gray-700">
          <div className="flex items-center gap-2 text-sm text-gray-300">
            <Filter className="w-4 h-4" />
            <span>
              {filteredVulnerabilities.length} of {vulnerabilities.length} vulnerabilities
            </span>
          </div>
          <Button
            onClick={clearAllFilters}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-white"
          >
            Clear all
          </Button>
        </div>
      )}

      {/* Severity Filters */}
      <div className="space-y-2">
        <h4 className="text-sm font-medium text-gray-300">Severity</h4>
        <div className="flex flex-wrap gap-2">
          {severityOptions.map(({ value, label, icon: Icon, color, bgColor }) => (
            <button
              key={value}
              onClick={() => toggleSeverity(value)}
              className={`flex items-center gap-2 px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                selectedSeverities.includes(value)
                  ? `${bgColor} ${color} border border-current`
                  : 'bg-gray-800 text-gray-400 border border-gray-700 hover:bg-gray-700'
              }`}
            >
              <Icon className="w-3 h-3" />
              {label}
            </button>
          ))}
        </div>
      </div>

      {/* Category Filters */}
      {categories.length > 0 && (
        <div className="space-y-2">
          <h4 className="text-sm font-medium text-gray-300">Category</h4>
          <div className="flex flex-wrap gap-2">
            {categories.map(category => (
              <button
                key={category}
                onClick={() => toggleCategory(category)}
                className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                  selectedCategories.includes(category)
                    ? 'bg-blue-500/20 text-blue-400 border border-blue-500/50'
                    : 'bg-gray-800 text-gray-400 border border-gray-700 hover:bg-gray-700'
                }`}
              >
                {category}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Results Summary */}
      <div className="text-xs text-gray-500 text-center">
        Showing {filteredVulnerabilities.length} vulnerabilities
        {hasActiveFilters && ` (filtered from ${vulnerabilities.length} total)`}
      </div>
    </div>
  )
} 